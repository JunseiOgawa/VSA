<!-- プロジェクト概要 -->
<ProjectSummary>
  <Name>VRC-SnapArchive</Name>
  <Description>VRChatのスクリーンショット管理アプリケーション</Description>
  <Goal>メタデータに基づいた写真整理と閲覧機能の提供</Goal>
  <TargetUsers>VRChatで写真をよく撮影するユーザー</TargetUsers>
</ProjectSummary>

<!-- システム構成 -->
<SystemComponents>
  <Component>
    <Name>VSA-launcher</Name>
    <Type>WinForms (.NET)</Type>
    <Purpose>バックグラウンド処理、設定管理、ファイル監視</Purpose>
    <Features>
      <Feature>ファイル監視とメタデータ付与</Feature>
      <Feature>フォルダ分け処理</Feature>
      <Feature>システムトレイ常駐</Feature>
      <Feature>設定管理</Feature>
    </Features>
  </Component>
  <Component>
    <Name>フロントエンドUI</Name>
    <Type>React/Electron</Type>
    <Purpose>写真閲覧、検索、一括処理</Purpose>
    <Features>
      <Feature>メタデータによる検索・絞り込み</Feature>
      <Feature>複数選択と一括操作</Feature>
      <Feature>指定フォルダへのエクスポート</Feature>
      <Feature>SNS投稿用定型文生成</Feature>
    </Features>
  </Component>
</SystemComponents>

<!-- 技術スタック -->
<TechnicalRequirements>
  <LibraryGroups>
    <Group name="ランチャー (.NET/WinForms)">
      <Library>
        <Name>System.IO.FileSystemWatcher</Name>
        <Purpose>ファイル変更監視</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>System.Drawing</Name>
        <Purpose>画像処理</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>Hjg.Pngcs</Name>
        <Purpose>PNG形式メタデータ操作</Purpose>
        <Installation>NuGet</Installation>
        <Notes>PNGのChunk形式メタデータ対応のため</Notes>
      </Library>
      <Library>
        <Name>Newtonsoft.Json</Name>
        <Purpose>設定ファイル処理</Purpose>
        <Installation>NuGet</Installation>
      </Library>
    </Group>
    <Group name="フロントエンド (React/Electron)">
      <Library>
        <Name>Electron</Name>
        <Purpose>デスクトップアプリケーション化</Purpose>
      </Library>
      <Library>
        <Name>React</Name>
        <Purpose>UI構築</Purpose>
      </Library>
      <Library>
        <Name>Flask (Python)</Name>
        <Purpose>バックエンドAPI</Purpose>
        <Notes>必要に応じてElectronから起動</Notes>
      </Library>
    </Group>
    
    <!-- 新しいバックエンドAPI関連のグループを追加 -->
    <Group name="バックエンドAPI (Python/Flask)">
      <Library>
        <Name>Flask</Name>
        <Purpose>RESTful APIフレームワーク</Purpose>
        <Installation>pip install</Installation>
      </Library>
      <Library>
        <Name>Flask-CORS</Name>
        <Purpose>クロスオリジンリソース共有対策</Purpose>
        <Installation>pip install</Installation>
      </Library>
      <Library>
        <Name>SQLite</Name>
        <Purpose>軽量データベース</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>SQLAlchemy</Name>
        <Purpose>オブジェクトリレーショナルマッパー(ORM)</Purpose>
        <Installation>pip install</Installation>
      </Library>
      <Library>
        <Name>Alembic</Name>
        <Purpose>データベースマイグレーション管理</Purpose>
        <Installation>pip install</Installation>
        <Notes>SQLAlchemyと連携してスキーマ変更を追跡・適用するためのツール</Notes>
      </Library>
      <Library>
        <Name>Pillow</Name>
        <Purpose>画像処理</Purpose>
        <Installation>pip install</Installation>
      </Library>
    </Group>
  </LibraryGroups>
  
  <!-- データベース設計を追加 -->
  <DatabaseDesign>
    <Database>SQLite</Database>
    <ORM>SQLAlchemy</ORM>
    <MigrationTool>
      <Name>Alembic</Name>
      <Purpose>スキーマ変更の追跡とバージョン管理</Purpose>
      <Structure>
        <Component>versions/ (マイグレーションスクリプト)</Component>
        <Component>alembic.ini (設定ファイル)</Component>
        <Component>env.py (環境設定)</Component>
      </Structure>
      <Usage>
        <Step>alembic init - 初期設定</Step>
        <Step>alembic revision --autogenerate -m "コメント" - 変更検出とマイグレーションスクリプト生成</Step>
        <Step>alembic upgrade head - 最新バージョンへの移行</Step>
        <Step>alembic downgrade - 必要に応じたロールバック</Step>
      </Usage>
    </MigrationTool>
    <Tables>
      <Table>
        <Name>image_metadata</Name>
        <Columns>
          <Column>id (主キー)</Column>
          <Column>file_path (ユニーク)</Column>
          <Column>file_name</Column>
          <Column>world_id</Column>
          <Column>world_name</Column>
          <Column>friends (JSON形式)</Column>
          <Column>capture_time</Column>
          <Column>created_at</Column>
          <Column>updated_at</Column>
        </Columns>
      </Table>
      <Table>
        <Name>settings</Name>
        <Columns>
          <Column>id (主キー)</Column>
          <Column>key</Column>
          <Column>value (JSON形式)</Column>
        </Columns>
        <SettingsKeys>
          <Key>tweet_templates</Key> <!-- テンプレート一覧をJSON形式で保存 -->
          <Key>default_tweet_template</Key> <!-- デフォルトで選択されるテンプレートID -->
        </SettingsKeys>
      </Table>
    </Tables>
  </DatabaseDesign>
</TechnicalRequirements>

<!-- 機能要件 -->
<Features>
  <Feature>
    <Name>メタデータ付与</Name>
    <Description>PNGファイルにワールド名、フレンド情報などのメタデータ付与</Description>
    <Implementation>Hjg.Pngcsライブラリを使用してPNGチャンクに情報を格納</Implementation>
    <Source>VRChatログファイルから情報取得</Source>
  </Feature>
  <Feature>
    <Name>フォルダ構造管理</Name>
    <Description>設定に基づいた自動フォルダ分け</Description>
    <Options>
      <Option>月単位</Option>
      <Option>週単位</Option>
      <Option>日単位</Option>
    </Options>
  </Feature>
  <Feature>
    <Name>ファイル名変更</Name>
    <Description>設定されたパターンに従いファイル名を自動変更</Description>
    <Formats>
      <Format>年_月_日_時分_連番</Format>
      <Format>年月日_時分_連番</Format>
      <Format>年-月-日-曜日-時分-連番</Format>
      <Format>その他の複数フォーマット</Format>
    </Formats>
  </Feature>
  <Feature>
    <Name>検索・絞り込み</Name>
    <Description>メタデータに基づく検索機能</Description>
    <SearchParameters>
      <Parameter>ワールド名</Parameter>
      <Parameter>フレンド名</Parameter>
      <Parameter>撮影日時</Parameter>
    </SearchParameters>
  </Feature>
  <Feature>
    <Name>圧縮機能</Name>
    <Description>月ごとの自動圧縮</Description>
  </Feature>
  <Feature>
    <Name>SNS投稿用定型文生成</Name>
    <Description>選択した写真のメタデータを使用してSNS投稿用の定型文を生成・コピー</Description>
    <Implementation>選択画像のworld_nameなどのメタデータを抽出し、テンプレートに挿入</Implementation>
    <TemplateVariables>
      <Variable>$world_name$</Variable>
      <Variable>$world_id$</Variable>
      <Variable>$capture_time$</Variable>
      <Variable>$friends$</Variable>
      <Variable>$file_name$</Variable>
      <Variable>$count$</Variable> <!-- 選択した写真の枚数 -->
      <Variable>$date$</Variable> <!-- 現在の日付 -->
    </TemplateVariables>
    <DefaultTemplates>
      <Template>「$world_name$」で撮影した写真です！ #VRChat #VRC写真</Template>
      <Template>$world_name$にて。$friends$と一緒に！ #VRChat</Template>
      <Template>今日は$count$枚の写真を撮りました！$world_name$にて。 #VRChat</Template>
    </DefaultTemplates>
  </Feature>
</Features>

<!-- データフロー -->
<DataFlow>
  <Step>ランチャーがVRChatスクリーンショットフォルダを監視</Step>
  <Step>新規ファイル検出時にログから現在のワールド情報とフレンド情報を取得</Step>
  <Step>PNG形式のメタデータとしてワールドID、フレンド名、撮影時刻を追加</Step>
  <Step>設定に基づいたファイル名変更処理</Step>
  <Step>フォルダ分け設定に従い適切な場所に保存</Step>
  <Step>メインアプリで閲覧・検索時にメタデータ情報を解析して表示</Step>
  <Step>複数画像選択時にSNS定型文生成ボタンをクリック</Step>
  <Step>選択画像のメタデータをバックエンドで取得</Step>
  <Step>テンプレートの変数をメタデータで置換</Step>
  <Step>生成されたテキストをユーザーに表示してクリップボードコピー機能を提供</Step>
</DataFlow>

<!-- UI要件 -->
<UIRequirements>
  <LauncherUI>
    <Type>シンプルな設定画面</Type>
    <Elements>
      <Element>スクリーンショットフォルダ設定</Element>
      <Element>出力先フォルダ設定</Element>
      <Element>メタデータ付与設定</Element>
      <Element>フォルダ分け設定</Element>
      <Element>ファイル名フォーマット設定</Element>
      <Element>圧縮設定</Element>
    </Elements>
  </LauncherUI>
  <MainUI>
    <Type>写真管理インターフェース</Type>
    <Elements>
      <Element>サムネイル表示</Element>
      <Element>検索・絞り込み機能</Element>
      <Element>メタデータ情報表示</Element>
      <Element>複数選択</Element>
      <Element>エクスポート機能</Element>
      <Element>SNS投稿用定型文生成</Element>
    </Elements>
    
    <!-- SNS定型文生成用モーダルの詳細 -->
    <Modal name="TemplateEditorModal">
      <Title>SNS投稿文テンプレート編集</Title>
      <Elements>
        <Element>テンプレート選択ドロップダウン</Element>
        <Element>テンプレート名入力欄</Element>
        <Element>テキスト編集エリア</Element>
        <Element>
          <Name>メタデータ変数ボタン群</Name>
          <Description>クリックするとカーソル位置に変数を挿入</Description>
          <Buttons>
            <Button>ワールド名 ($world_name$)</Button>
            <Button>ワールドID ($world_id$)</Button>
            <Button>撮影日時 ($capture_time$)</Button>
            <Button>フレンド ($friends$)</Button>
            <Button>ファイル名 ($file_name$)</Button>
            <Button>選択枚数 ($count$)</Button>
            <Button>現在日付 ($date$)</Button>
          </Buttons>
        </Element>
        <Element>プレビューエリア</Element>
        <Element>コピーボタン</Element>
        <Element>保存ボタン</Element>
        <Element>削除ボタン</Element>
      </Elements>
    </Modal>
  </MainUI>
</UIRequirements>

<!-- 将来の拡張計画 -->
<FutureExtensions>
  <Extension>
    <Name>AI機能</Name>
    <Description>写真の表情やジェスチャーを分析</Description>
  </Extension>
  <Extension>
    <Name>フォトブック機能</Name>
    <Description>明るさや内容に基づいた自動フォトブック作成</Description>
  </Extension>
</FutureExtensions>

<!-- システム連携部分を追加 -->
<SystemIntegration>
  <APIServer>
    <Name>VSA-Backend</Name>
    <Type>Flask (Python)</Type>
    <LaunchMethod>Electronアプリケーションから必要時に起動</LaunchMethod>
    <Structure>
      <Component>app.py (エントリーポイント)</Component>
      <Component>models/ (SQLAlchemyモデル)</Component>
      <Component>routes/ (APIエンドポイント)</Component>
      <Component>services/ (ビジネスロジック)</Component>
      <Component>utils/ (ユーティリティ関数)</Component>
    </Structure>
    <Endpoints>
      <Endpoint>
        <Path>/api/images</Path>
        <Method>GET</Method>
        <Description>画像一覧の取得・検索</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/images/{id}/metadata</Path>
        <Method>GET</Method>
        <Description>画像メタデータの取得</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/images/export</Path>
        <Method>POST</Method>
        <Description>画像エクスポート機能</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/settings</Path>
        <Method>GET/PUT</Method>
        <Description>設定の取得・更新</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates</Path>
        <Method>GET</Method>
        <Description>テンプレート一覧の取得</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates</Path>
        <Method>POST</Method>
        <Description>新しいテンプレートの作成</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates/{id}</Path>
        <Method>PUT</Method>
        <Description>テンプレートの更新</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates/{id}</Path>
        <Method>DELETE</Method>
        <Description>テンプレートの削除</Description>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates/generate</Path>
        <Method>POST</Method>
        <Description>選択した画像IDとテンプレートIDから定型文を生成</Description>
        <RequestBody>
          <Parameter>imageIds (配列)</Parameter>
          <Parameter>templateId</Parameter>
        </RequestBody>
        <Response>
          <Parameter>text (生成された定型文)</Parameter>
        </Response>
      </Endpoint>
    </Endpoints>
  </APIServer>
</SystemIntegration>
