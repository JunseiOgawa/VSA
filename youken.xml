<!-- システム構成 -->
<SystemComponents>
  <Component>
    <Name>VSA-launcher</Name>
    <Type>WinForms (.NET)</Type>
    <Purpose>バックグラウンド処理、設定管理、ファイル監視</Purpose>
    <Features>
      <Feature>ファイル監視とメタデータ付与</Feature>
      <Feature>フォルダ分け処理</Feature>
      <Feature>システムトレイ常駐</Feature>
      <Feature>設定管理</Feature>
    </Features>
  </Component>
  <Component>
    <Name>フロントエンドUI</Name>
    <Type>React/Electron</Type>
    <Purpose>写真閲覧、検索、一括処理</Purpose>
    <Features>
      <Feature>メタデータによる検索・絞り込み</Feature>
      <Feature>複数選択と一括操作</Feature>
      <Feature>指定フォルダへのエクスポート</Feature>
      <Feature>SNS投稿用定型文生成</Feature>
    </Features>
  </Component>
  <Component>
    <Name>バックエンドAPI</Name>
    <Type>FastAPI (Python)</Type>
    <Purpose>データアクセス、メタデータ処理、画像処理</Purpose>
    <Features>
      <Feature>RESTful APIエンドポイント提供</Feature>
      <Feature>データベースアクセス</Feature>
      <Feature>画像メタデータ処理</Feature>
    </Features>
  </Component>
</SystemComponents>

<!-- 技術スタック -->
<TechnicalRequirements>
  <LibraryGroups>
    <Group name="ランチャー (.NET/WinForms)">
      <Library>
        <Name>System.IO.FileSystemWatcher</Name>
        <Purpose>ファイル変更監視</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>System.Drawing</Name>
        <Purpose>画像処理</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>Hjg.Pngcs</Name>
        <Purpose>PNG形式メタデータ操作</Purpose>
        <Installation>NuGet</Installation>
        <Notes>PNGのChunk形式メタデータ対応のため</Notes>
      </Library>
      <Library>
        <Name>Newtonsoft.Json</Name>
        <Purpose>設定ファイル処理</Purpose>
        <Installation>NuGet</Installation>
      </Library>
    </Group>
    <Group name="フロントエンド (React/Electron)">
      <Library>
        <Name>Electron</Name>
        <Purpose>デスクトップアプリケーション化</Purpose>
      </Library>
      <Library>
        <Name>React</Name>
        <Purpose>UI構築</Purpose>
      </Library>
      <Library>
        <Name>Material UI</Name>
        <Purpose>UIコンポーネント</Purpose>
        <Installation>npm install @mui/material @emotion/react @emotion/styled @mui/icons-material</Installation>
        <Notes>一貫性のあるデザインシステムでUIを構築するため</Notes>
      </Library>
      <Library>
        <Name>axios</Name>
        <Purpose>APIリクエスト</Purpose>
        <Installation>npm install axios</Installation>
        <Notes>バックエンドAPIと通信するためのHTTPクライアント</Notes>
      </Library>
    </Group>
    
    <Group name="バックエンドAPI (Python)">
      <Library>
        <Name>FastAPI</Name>
        <Purpose>REST API実装</Purpose>
        <Installation>pip install fastapi uvicorn</Installation>
        <Notes>高速なAPIフレームワークと自動ドキュメント生成機能</Notes>
      </Library>
      <Library>
        <Name>SQLite</Name>
        <Purpose>軽量データベース</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>SQLAlchemy</Name>
        <Purpose>オブジェクトリレーショナルマッパー(ORM)</Purpose>
        <Installation>pip install sqlalchemy</Installation>
      </Library>
      <Library>
        <Name>Alembic</Name>
        <Purpose>データベースマイグレーション管理</Purpose>
        <Installation>pip install alembic</Installation>
        <Notes>SQLAlchemyと連携してスキーマ変更を追跡・適用するためのツール</Notes>
      </Library>
      <Library>
        <Name>Pillow</Name>
        <Purpose>画像処理</Purpose>
        <Installation>pip install pillow</Installation>
      </Library>
      <Library>
        <Name>python-dateutil</Name>
        <Purpose>日付処理の拡張ライブラリ</Purpose>
        <Installation>pip install python-dateutil</Installation>
      </Library>
    </Group>

    <Group name="圧縮と画像フォーマット">
      <Library>
        <Name>py7zr</Name>
        <Purpose>7z形式の圧縮・解凍</Purpose>
        <Installation>pip install py7zr</Installation>
        <Notes>高圧縮率のアーカイブ作成に使用</Notes>
      </Library>
      <Library>
        <Name>pillow-jxl-plugin</Name>
        <Purpose>JPEG XL形式の画像サポート</Purpose>
        <Installation>pip install pillow-jxl-plugin</Installation>
        <Notes>Pillowの拡張プラグインとしてJPEG XL形式をサポート</Notes>
      </Library>
    </Group>
  </LibraryGroups>
</TechnicalRequirements>

<!-- システム連携部分 -->
<SystemIntegration>
  <BackendModule>
    <Name>VSA-Backend</Name>
    <Type>FastAPI サーバー</Type>
    <LaunchMethod>独立プロセスとして起動</LaunchMethod>
    <Structure>
      <Component>main.py (API エントリーポイント)</Component>
      <Component>models/ (SQLAlchemyモデル)</Component>
      <Component>routers/ (APIルート定義)</Component>
      <Component>services/ (ビジネスロジック)</Component>
      <Component>utils/ (ユーティリティ関数)</Component>
      <Component>database.py (DB接続管理)</Component>
    </Structure>
    <APIEndpoints>
      <Endpoint>
        <Path>/api/templates</Path>
        <Method>GET</Method>
        <Description>テンプレート一覧の取得</Description>
        <Returns>
          <Object>テンプレートリスト</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates</Path>
        <Method>POST</Method>
        <Description>新しいテンプレートの作成</Description>
        <Parameters>
          <Parameter>name (テンプレート名)</Parameter>
          <Parameter>template (テンプレート内容)</Parameter>
        </Parameters>
        <Returns>
          <Object>作成されたテンプレート</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates/{template_id}</Path>
        <Method>PUT</Method>
        <Description>テンプレートの更新</Description>
        <Parameters>
          <Parameter>name (テンプレート名)</Parameter>
          <Parameter>template (テンプレート内容)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>更新成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/templates/{template_id}</Path>
        <Method>DELETE</Method>
        <Description>テンプレートの削除</Description>
        <Returns>
          <Boolean>削除成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/generate-text</Path>
        <Method>POST</Method>
        <Description>選択した画像IDとテンプレートIDから定型文を生成</Description>
        <Parameters>
          <Parameter>image_ids (画像ID配列)</Parameter>
          <Parameter>template_id (テンプレートID)</Parameter>
        </Parameters>
        <Returns>
          <String>生成された定型文</String>
          <Object>置換された変数リスト</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/settings</Path>
        <Method>GET</Method>
        <Description>現在の設定を取得</Description>
        <Returns>
          <Object>設定情報</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/settings</Path>
        <Method>PUT</Method>
        <Description>設定情報を更新</Description>
        <Parameters>
          <Parameter>settings (設定情報オブジェクト)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>更新成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/images</Path>
        <Method>GET</Method>
        <Description>画像一覧の取得（ページネーション、フィルタリング対応）</Description>
        <Parameters>
          <Parameter>page (ページ番号)</Parameter>
          <Parameter>limit (1ページあたりの項目数)</Parameter>
          <Parameter>filters (フィルタ条件)</Parameter>
        </Parameters>
        <Returns>
          <Object>画像リスト</Object>
          <Object>メタ情報（総数、ページ数など）</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/images/{image_id}</Path>
        <Method>GET</Method>
        <Description>特定画像のメタデータ取得</Description>
        <Returns>
          <Object>画像メタデータ</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/albums</Path>
        <Method>GET</Method>
        <Description>アルバム一覧の取得</Description>
        <Returns>
          <Object>アルバムリスト</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/albums</Path>
        <Method>POST</Method>
        <Description>新しいアルバムの作成</Description>
        <Parameters>
          <Parameter>name (アルバム名)</Parameter>
          <Parameter>description (説明)</Parameter>
        </Parameters>
        <Returns>
          <Object>作成されたアルバム</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/albums/{album_id}</Path>
        <Method>PUT</Method>
        <Description>アルバム情報の更新</Description>
        <Parameters>
          <Parameter>name (アルバム名)</Parameter>
          <Parameter>description (説明)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>更新成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/albums/{album_id}</Path>
        <Method>DELETE</Method>
        <Description>アルバムの削除</Description>
        <Returns>
          <Boolean>削除成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/albums/{album_id}/images</Path>
        <Method>GET</Method>
        <Description>アルバム内の画像一覧取得</Description>
        <Returns>
          <Object>画像リスト</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/albums/{album_id}/images</Path>
        <Method>POST</Method>
        <Description>アルバムに画像を追加</Description>
        <Parameters>
          <Parameter>image_ids (画像ID配列)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>追加成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/composites</Path>
        <Method>GET</Method>
        <Description>コンポジット一覧の取得</Description>
        <Returns>
          <Object>コンポジットリスト</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/composites</Path>
        <Method>POST</Method>
        <Description>新しいコンポジットの作成</Description>
        <Parameters>
          <Parameter>name (コンポジット名)</Parameter>
          <Parameter>layout (レイアウト情報)</Parameter>
          <Parameter>image_ids (画像ID配列)</Parameter>
        </Parameters>
        <Returns>
          <Object>作成されたコンポジット</Object>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/composites/{composite_id}</Path>
        <Method>PUT</Method>
        <Description>コンポジット情報の更新</Description>
        <Parameters>
          <Parameter>name (コンポジット名)</Parameter>
          <Parameter>layout (レイアウト情報)</Parameter>
          <Parameter>image_ids (画像ID配列)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>更新成功フラグ</Boolean>
        </Returns>
      </Endpoint>
      <Endpoint>
        <Path>/api/composites/{composite_id}</Path>
        <Method>DELETE</Method>
        <Description>コンポジットの削除</Description>
        <Returns>
          <Boolean>削除成功フラグ</Boolean>
        </Returns>
      </Endpoint>
    </APIEndpoints>
  </BackendModule>
  
  <CommunicationLayer>
    <Method>REST API over HTTP</Method>
    <Description>JSON形式のRESTful API通信</Description>
    <Protocol>
      <RequestFormat>HTTP リクエスト (GET, POST, PUT, DELETE)</RequestFormat>
      <ResponseFormat>JSON レスポンス</ResponseFormat>
    </Protocol>
    <Performance>
      <DataVolume>画像300〜2000枚、メタデータ（ユーザー名最大20名/画像）</DataVolume>
      <ResponseTime>検索結果は30秒以内に描画が必要</ResponseTime>
    </Performance>
    <Security>
      <Method>ローカルネットワークのみで稼働</Method>
      <Notes>localhost または 127.0.0.1 インターフェースにのみバインド</Notes>
    </Security>
    <Optimization>
      <Strategy>ページネーションの実装</Strategy>
      <Strategy>必要なデータのみを返す最適化</Strategy>
      <Strategy>キャッシュ機構の導入</Strategy>
    </Optimization>
  </CommunicationLayer>
</SystemIntegration>

<!-- 実装方針と開発手順 -->
<ImplementationStrategy>
  <DevelopmentPhases>
    <Phase>
      <Name>バックエンドAPI構築</Name>
      <Order>1</Order>
      <Tasks>
        <Task>FastAPIプロジェクト構造の作成</Task>
        <Task>SQLiteデータベース接続設定</Task>
        <Task>SQLAlchemyモデル定義</Task>
        <Task>Alembicマイグレーション初期化</Task>
        <Task>基本APIエンドポイントの実装</Task>
        <Task>APIテスト環境の構築</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>フロントエンド基盤構築</Name>
      <Order>2</Order>
      <Tasks>
        <Task>Electronプロジェクト初期化</Task>
        <Task>APIクライアントサービス実装</Task>
        <Task>基本的なUI構造の実装</Task>
        <Task>通信エラー処理の実装</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>ランチャー機能実装</Name>
      <Order>3</Order>
      <Tasks>
        <Task>ファイル監視機能実装</Task>
        <Task>メタデータ付与機能実装</Task>
        <Task>バックエンドAPIとの連携実装</Task>
        <Task>システムトレイ常駐機能実装</Task>
        <Task>設定画面実装</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>機能単位の実装</Name>
      <Order>4</Order>
      <FeatureOrder>
        <Feature>画像一覧取得と表示</Feature>
        <Feature>メタデータ検索機能</Feature>
        <Feature>画像詳細表示</Feature>
        <Feature>テンプレート管理</Feature>
        <Feature>SNS投稿文生成</Feature>
        <Feature>設定管理</Feature>
      </FeatureOrder>
    </Phase>
  </DevelopmentPhases>
  
  <TestingStrategy>
    <Approach>
      <Name>機能単位のテスト</Name>
      <Tools>
        <Tool>pytest (Python)</Tool>
        <Tool>Jest (JavaScript)</Tool>
      </Tools>
    </Approach>
    <TestTypes>
      <Type>単体テスト（各関数・メソッド）</Type>
      <Type>API統合テスト</Type>
      <Type>UIテスト（基本操作）</Type>
      <Type>パフォーマンステスト（大量データ処理）</Type>
    </TestTypes>
  </TestingStrategy>
</ImplementationStrategy>

<!-- 新しいセクションを追加 -->
<DataManagement>
  <JsonManagedData>
    <Data>設定情報 (settings.json)</Data>
    <Data>テンプレート定義 (templates.json)</Data>
    <Notes>これらのデータはJSON形式のファイルで管理し、変更頻度が少なく、構成管理に適しているため</Notes>
  </JsonManagedData>
  
  <DatabaseManagedData>
    <Data>画像メタデータ</Data>
    <Data>アルバム情報</Data>
    <Data>コンポジット情報</Data>
    <Data>タグ情報</Data>
    <Notes>これらのデータはSQLiteデータベースで管理し、検索や関連付けが必要なため</Notes>
  </DatabaseManagedData>
</DataManagement>

<!-- 配布とパッケージング情報 -->
<Distribution>
  <PackagingStrategy>
    <Name>ビルド済みバイナリ配布</Name>
    <Description>Rustなどの依存関係をユーザーにインストールさせることなく、すべての必要なライブラリを同梱</Description>
    <Tools>
      <Tool>
        <Name>PyInstaller</Name>
        <Purpose>Python FastAPIサーバーのパッケージ化</Purpose>
        <Installation>pip install pyinstaller</Installation>
        <Configuration>
          <File>VSA-Backend.spec</File>
          <Options>--onedir --additional-hooks-dir=hooks</Options>
        </Configuration>
      </Tool>
      <Tool>
        <Name>electron-builder</Name>
        <Purpose>ElectronフロントエンドUIのパッケージ化</Purpose>
        <Installation>npm install --save-dev electron-builder</Installation>
      </Tool>
      <Tool>
        <Name>Inno Setup</Name>
        <Purpose>Windows用インストーラー作成</Purpose>
        <Notes>各コンポーネントを統合した単一インストーラーを提供</Notes>
      </Tool>
    </Tools>
  </PackagingStrategy>
  
  <PackageStructure>
    <Component>
      <Name>VSA-launcher.exe</Name>
      <Type>.NET WinFormsアプリ</Type>
      <Path>.</Path>
    </Component>
    <Component>
      <Name>VSA-UI</Name>
      <Type>Electronパッケージ</Type>
      <Path>.</Path>
      <Subcomponents>
        <Subcomponent>VSA-UI.exe</Subcomponent>
        <Subcomponent>resources/</Subcomponent>
      </Subcomponents>
    </Component>
    <Component>
      <Name>VSA-API</Name>
      <Type>PyInstallerパッケージ</Type>
      <Path>.</Path>
      <Subcomponents>
        <Subcomponent>VSA-API.exe</Subcomponent>
        <Subcomponent>lib/ (依存ライブラリ)</Subcomponent>
        <Subcomponent>_internal/ (PyInstaller生成ファイル)</Subcomponent>
      </Subcomponents>
    </Component>
    <Component>
      <Name>config.json</Name>
      <Type>設定ファイル</Type>
      <Path>.</Path>
    </Component>
  </PackageStructure>
</Distribution>
