<!-- プロジェクト概要 -->
<ProjectSummary>
  <Name>VRC-SnapArchive</Name>
  <Description>VRChatのスクリーンショット管理アプリケーション</Description>
  <Goal>メタデータに基づいた写真整理と閲覧機能の提供</Goal>
  <TargetUsers>VRChatで写真をよく撮影するユーザー</TargetUsers>
</ProjectSummary>

<!-- システム構成 -->
<SystemComponents>
  <Component>
    <Name>VSA-launcher</Name>
    <Type>WinForms (.NET)</Type>
    <Purpose>バックグラウンド処理、設定管理、ファイル監視</Purpose>
    <Features>
      <Feature>ファイル監視とメタデータ付与</Feature>
      <Feature>フォルダ分け処理</Feature>
      <Feature>システムトレイ常駐</Feature>
      <Feature>設定管理</Feature>
    </Features>
  </Component>
  <Component>
    <Name>フロントエンドUI</Name>
    <Type>React/Electron</Type>
    <Purpose>写真閲覧、検索、一括処理</Purpose>
    <Features>
      <Feature>メタデータによる検索・絞り込み</Feature>
      <Feature>複数選択と一括操作</Feature>
      <Feature>指定フォルダへのエクスポート</Feature>
      <Feature>SNS投稿用定型文生成</Feature>
    </Features>
  </Component>
</SystemComponents>

<!-- 技術スタック -->
<TechnicalRequirements>
  <LibraryGroups>
    <Group name="ランチャー (.NET/WinForms)">
      <Library>
        <Name>System.IO.FileSystemWatcher</Name>
        <Purpose>ファイル変更監視</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>System.Drawing</Name>
        <Purpose>画像処理</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>Hjg.Pngcs</Name>
        <Purpose>PNG形式メタデータ操作</Purpose>
        <Installation>NuGet</Installation>
        <Notes>PNGのChunk形式メタデータ対応のため</Notes>
      </Library>
      <Library>
        <Name>Newtonsoft.Json</Name>
        <Purpose>設定ファイル処理</Purpose>
        <Installation>NuGet</Installation>
      </Library>
    </Group>
    <Group name="フロントエンド (React/Electron)">
      <Library>
        <Name>Electron</Name>
        <Purpose>デスクトップアプリケーション化</Purpose>
      </Library>
      <Library>
        <Name>React</Name>
        <Purpose>UI構築</Purpose>
      </Library>
      <Library>
        <Name>Material UI</Name>
        <Purpose>UIコンポーネント</Purpose>
        <Installation>npm install @mui/material @emotion/react @emotion/styled @mui/icons-material</Installation>
        <Notes>一貫性のあるデザインシステムでUIを構築するため</Notes>
      </Library>
      <Library>
        <Name>python-shell</Name>
        <Purpose>ElectronからPythonスクリプトを実行</Purpose>
        <Installation>npm install python-shell</Installation>
        <Notes>サブプロセスとしてPythonを実行し、標準入出力でデータ交換</Notes>
      </Library>
    </Group>
    
    <Group name="バックエンドモジュール (Python)">
      <Library>
        <Name>SQLite</Name>
        <Purpose>軽量データベース</Purpose>
        <Installation>標準ライブラリ</Installation>
      </Library>
      <Library>
        <Name>SQLAlchemy</Name>
        <Purpose>オブジェクトリレーショナルマッパー(ORM)</Purpose>
        <Installation>pip install</Installation>
      </Library>
      <Library>
        <Name>Alembic</Name>
        <Purpose>データベースマイグレーション管理</Purpose>
        <Installation>pip install</Installation>
        <Notes>SQLAlchemyと連携してスキーマ変更を追跡・適用するためのツール</Notes>
      </Library>
      <Library>
        <Name>Pillow</Name>
        <Purpose>画像処理</Purpose>
        <Installation>pip install</Installation>
      </Library>
      <Library>
        <Name>python-dateutil</Name>
        <Purpose>日付処理の拡張ライブラリ</Purpose>
        <Installation>pip install python-dateutil</Installation>
      </Library>
    </Group>

    <Group name="圧縮と画像フォーマット">
      <Library>
        <Name>py7zr</Name>
        <Purpose>7z形式の圧縮・解凍</Purpose>
        <Installation>pip install py7zr</Installation>
        <Notes>高圧縮率のアーカイブ作成に使用</Notes>
      </Library>
      <Library>
        <Name>pillow-jxl-plugin</Name>
        <Purpose>JPEG XL形式の画像サポート</Purpose>
        <Installation>pip install pillow-jxl-plugin</Installation>
        <Notes>Pillowの拡張プラグインとしてJPEG XL形式をサポート</Notes>
      </Library>
    </Group>
  </LibraryGroups>
  
  <!-- データベース設計を追加 -->
  <DatabaseDesign>
    <Database>SQLite</Database>
    <ORM>SQLAlchemy</ORM>
    <MigrationTool>
      <Name>Alembic</Name>
      <Purpose>スキーマ変更の追跡とバージョン管理</Purpose>
      <Structure>
        <Component>versions/ (マイグレーションスクリプト)</Component>
        <Component>alembic.ini (設定ファイル)</Component>
        <Component>env.py (環境設定)</Component>
      </Structure>
      <Usage>
        <Step>alembic init - 初期設定</Step>
        <Step>alembic revision --autogenerate -m "コメント" - 変更検出とマイグレーションスクリプト生成</Step>
        <Step>alembic upgrade head - 最新バージョンへの移行</Step>
        <Step>alembic downgrade - 必要に応じたロールバック</Step>
      </Usage>
    </MigrationTool>
    <Tables>
      <Table>
        <Name>image_metadata</Name>
        <Columns>
          <Column>img_Id (主キー)</Column>
          <Column>img_Path (ユニーク)</Column>
          <Column>img_FileName</Column>
          <Column>img_Date (撮影日時)</Column>
          <Column>img_Users (JSON形式)</Column>
          <Column>img_WorldName</Column>
          <Column>img_WorldID</Column>
          <Column>img_Sort (ソート順)</Column>
          <Column>created_at</Column>
          <Column>updated_at</Column>
        </Columns>
      </Table>
      <Table>
        <Name>settings</Name>
        <Columns>
          <Column>id (主キー)</Column>
          <Column>key</Column>
          <Column>value (JSON形式)</Column>
        </Columns>
        <SettingsKeys>
          <Key>tweet_templates</Key> <!-- テンプレート一覧をJSON形式で保存 -->
          <Key>default_tweet_template</Key> <!-- デフォルトで選択されるテンプレートID -->
        </SettingsKeys>
      </Table>
    </Tables>
  </DatabaseDesign>
</TechnicalRequirements>

<!-- 機能要件 -->
<Features>
  <Feature>
    <Name>メタデータ付与</Name>
    <Description>PNGファイルにワールド名、フレンド情報などのメタデータ付与</Description>
    <Implementation>Hjg.Pngcsライブラリを使用してPNGチャンクに情報を格納</Implementation>
    <Source>VRChatログファイルから情報取得</Source>
  </Feature>
  <Feature>
    <Name>フォルダ構造管理</Name>
    <Description>設定に基づいた自動フォルダ分け</Description>
    <Options>
      <Option>月単位</Option>
      <Option>週単位</Option>
      <Option>日単位</Option>
    </Options>
  </Feature>
  <Feature>
    <Name>ファイル名変更</Name>
    <Description>設定されたパターンに従いファイル名を自動変更</Description>
    <Formats>
      <Format>年_月_日_時分_連番</Format>
      <Format>年月日_時分_連番</Format>
      <Format>年-月-日-曜日-時分-連番</Format>
      <Format>その他の複数フォーマット</Format>
    </Formats>
  </Feature>
  <Feature>
    <Name>検索・絞り込み</Name>
    <Description>メタデータに基づく検索機能</Description>
    <SearchParameters>
      <Parameter>ワールド名</Parameter>
      <Parameter>フレンド名</Parameter>
      <Parameter>撮影日時</Parameter>
    </SearchParameters>
  </Feature>
  <Feature>
    <Name>圧縮機能</Name>
    <Description>月ごとの自動圧縮</Description>
  </Feature>
  <Feature>
    <Name>SNS投稿用定型文生成</Name>
    <Description>選択した写真のメタデータを使用してSNS投稿用の定型文を生成・コピー</Description>
    <Implementation>選択画像のworld_nameなどのメタデータを抽出し、テンプレートに挿入</Implementation>
    <TemplateVariables>
      <Variable>$world_name$</Variable>
      <Variable>$world_id$</Variable>
      <Variable>$capture_time$</Variable>
      <Variable>$friends$</Variable>
      <Variable>$file_name$</Variable>
      <Variable>$count$</Variable> <!-- 選択した写真の枚数 -->
      <Variable>$date$</Variable> <!-- 現在の日付 -->
    </TemplateVariables>
    <DefaultTemplates>
      <Template>「$world_name$」で撮影した写真です！ #VRChat #VRC写真</Template>
      <Template>$world_name$にて。$friends$と一緒に！ #VRChat</Template>
      <Template>今日は$count$枚の写真を撮りました！$world_name$にて。 #VRChat</Template>
    </DefaultTemplates>
  </Feature>
</Features>

<!-- データフロー -->
<DataFlow>
  <Step>ランチャーがVRChatスクリーンショットフォルダを監視</Step>
  <Step>新規ファイル検出時にログから現在のワールド情報とフレンド情報を取得</Step>
  <Step>PNG形式のメタデータとしてワールドID、フレンド名、撮影時刻を追加</Step>
  <Step>設定に基づいたファイル名変更処理</Step>
  <Step>フォルダ分け設定に従い適切な場所に保存</Step>
  <Step>メインアプリで閲覧・検索時にメタデータ情報を解析して表示</Step>
  <Step>複数画像選択時にSNS定型文生成ボタンをクリック</Step>
  <Step>選択画像のメタデータをバックエンドで取得</Step>
  <Step>テンプレートの変数をメタデータで置換</Step>
  <Step>生成されたテキストをユーザーに表示してクリップボードコピー機能を提供</Step>
</DataFlow>

<!-- UI要件 -->
<UIRequirements>
  <LauncherUI>
    <Type>シンプルな設定画面</Type>
    <Elements>
      <Element>スクリーンショットフォルダ設定</Element>
      <Element>出力先フォルダ設定</Element>
      <Element>メタデータ付与設定</Element>
      <Element>フォルダ分け設定</Element>
      <Element>ファイル名フォーマット設定</Element>
      <Element>圧縮設定</Element>
    </Elements>
  </LauncherUI>
  <MainUI>
    <Type>写真管理インターフェース</Type>
    <Elements>
      <Element>サムネイル表示</Element>
      <Element>検索・絞り込み機能</Element>
      <Element>メタデータ情報表示</Element>
      <Element>複数選択</Element>
      <Element>エクスポート機能</Element>
      <Element>SNS投稿用定型文生成</Element>
    </Elements>
    
    <!-- SNS定型文生成用モーダルの詳細 -->
    <Modal name="TemplateEditorModal">
      <Title>SNS投稿文テンプレート編集</Title>
      <Elements>
        <Element>テンプレート選択ドロップダウン</Element>
        <Element>テンプレート名入力欄</Element>
        <Element>テキスト編集エリア</Element>
        <Element>
          <Name>メタデータ変数ボタン群</Name>
          <Description>クリックするとカーソル位置に変数を挿入</Description>
          <Buttons>
            <Button>ワールド名 ($world_name$)</Button>
            <Button>ワールドID ($world_id$)</Button>
            <Button>撮影日時 ($capture_time$)</Button>
            <Button>フレンド ($friends$)</Button>
            <Button>ファイル名 ($file_name$)</Button>
            <Button>選択枚数 ($count$)</Button>
            <Button>現在日付 ($date$)</Button>
          </Buttons>
        </Element>
        <Element>プレビューエリア</Element>
        <Element>コピーボタン</Element>
        <Element>保存ボタン</Element>
        <Element>削除ボタン</Element>
      </Elements>
    </Modal>
  </MainUI>
</UIRequirements>

<!-- 将来の拡張計画 -->
<FutureExtensions>
  <Extension>
    <Name>AI機能</Name>
    <Description>写真の表情やジェスチャーを分析</Description>
  </Extension>
  <Extension>
    <Name>フォトブック機能</Name>
    <Description>明るさや内容に基づいた自動フォトブック作成</Description>
  </Extension>
</FutureExtensions>

<!-- 実装方針と開発手順 -->
<ImplementationStrategy>
  <DevelopmentPhases>
    <Phase>
      <Name>バックエンド基盤構築</Name>
      <Order>1</Order>
      <Tasks>
        <Task>プロジェクト構造の作成</Task>
        <Task>SQLiteデータベース接続設定</Task>
        <Task>SQLAlchemyモデル定義</Task>
        <Task>Alembicマイグレーション初期化</Task>
        <Task>基本的なデータアクセス関数の実装</Task>
        <Task>テスト環境の構築</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>コミュニケーション層構築</Name>
      <Order>2</Order>
      <Tasks>
        <Task>Python-Electronインターフェース実装</Task>
        <Task>標準入出力を用いたJSON通信の実装</Task>
        <Task>基本的なエラーハンドリングの実装</Task>
        <Task>テスト用CLI呼び出し機能の実装</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>フロントエンド基盤構築</Name>
      <Order>3</Order>
      <Tasks>
        <Task>Electronプロジェクト初期化</Task>
        <Task>pythonManagerモジュール実装</Task>
        <Task>IPC通信ハンドラー実装</Task>
        <Task>フロントエンドAPI抽象化層の実装</Task>
        <Task>基本的なUI構造の実装</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>機能単位の実装</Name>
      <Order>4</Order>
      <Strategy>
        <Name>垂直スライス開発</Name>
        <Description>1つの機能について、バックエンド、通信層、フロントエンドの順に実装を完成させてから次の機能に移る</Description>
        <Benefits>
          <Benefit>早い段階で動作確認ができる</Benefit>
          <Benefit>設計上の問題を早期に発見できる</Benefit>
          <Benefit>モチベーション維持に有効</Benefit>
        </Benefits>
      </Strategy>
      <FeatureOrder>
        <Feature>画像一覧取得と表示</Feature>
        <Feature>メタデータ検索機能</Feature>
        <Feature>画像詳細表示</Feature>
        <Feature>テンプレート管理</Feature>
        <Feature>SNS投稿文生成</Feature>
        <Feature>設定管理</Feature>
      </FeatureOrder>
    </Phase>
    <Phase>
      <Name>統合とテスト</Name>
      <Order>5</Order>
      <Tasks>
        <Task>全機能の統合テスト</Task>
        <Task>パフォーマンス最適化</Task>
        <Task>エラーハンドリングの強化</Task>
        <Task>VSA-launcherとの連携テスト</Task>
      </Tasks>
    </Phase>
    <Phase>
      <Name>パッケージング準備</Name>
      <Order>6</Order>
      <Tasks>
        <Task>PyInstaller設定</Task>
        <Task>electron-builder設定</Task>
        <Task>依存関係の確認と最適化</Task>
        <Task>クリーン環境でのテスト</Task>
      </Tasks>
    </Phase>
  </DevelopmentPhases>
  
  <TestingStrategy>
    <Approach>
      <Name>機能単位のテスト</Name>
      <Tools>
        <Tool>pytest (Python)</Tool>
        <Tool>Jest (JavaScript)</Tool>
      </Tools>
    </Approach>
    <TestTypes>
      <Type>単体テスト（各関数・メソッド）</Type>
      <Type>統合テスト（Python-Electron間通信）</Type>
      <Type>UIテスト（基本操作）</Type>
      <Type>パフォーマンステスト（大量データ処理）</Type>
    </TestTypes>
  </TestingStrategy>
  
  <CommunicationDetails>
    <Protocol>
      <Name>JSON over stdin/stdout</Name>
      <Format>
        <Request>
          {
            "command": "function_name",
            "params": {
              "param1": "value1",
              "param2": "value2"
            },
            "id": "unique_request_id"
          }
        </Request>
        <Response>
          {
            "result": { ... },
            "error": null,
            "id": "unique_request_id"
          }
        </Response>
        <ErrorResponse>
          {
            "result": null,
            "error": {
              "code": 500,
              "message": "エラーメッセージ"
            },
            "id": "unique_request_id"
          }
        </ErrorResponse>
      </Format>
    </Protocol>
    <PythonProcessManagement>
      <Strategy>
        <Name>長時間実行プロセス</Name>
        <Description>アプリケーション起動時にPythonプロセスを開始し、終了時に停止する。起動コストを削減し応答性を向上。</Description>
      </Strategy>
      <Initialization>
        <Task>環境変数設定</Task>
        <Task>データベース接続確認</Task>
        <Task>初期設定の読み込み</Task>
      </Initialization>
      <ErrorRecovery>
        <Strategy>プロセス監視とリスタート</Strategy>
        <MaxRetries>3</MaxRetries>
        <RetryDelay>2000ms</RetryDelay>
      </ErrorRecovery>
    </PythonProcessManagement>
  </CommunicationDetails>
</ImplementationStrategy>

<!-- システム連携部分を修正 -->
<SystemIntegration>
  <BackendModule>
    <Name>VSA-Backend</Name>
    <Type>Python モジュール</Type>
    <LaunchMethod>Electronアプリケーションから直接実行 (サブプロセス)</LaunchMethod>
    <Structure>
      <Component>main.py (メインモジュール)</Component>
      <Component>models/ (SQLAlchemyモデル)</Component>
      <Component>services/ (ビジネスロジック)</Component>
      <Component>utils/ (ユーティリティ関数)</Component>
      <Component>database.py (DB接続管理)</Component>
    </Structure>
    <Functions>
      <Function>
        <Name>get_templates</Name>
        <Description>テンプレート一覧の取得</Description>
        <Returns>
          <Object>テンプレートリスト</Object>
        </Returns>
      </Function>
      <Function>
        <Name>create_template</Name>
        <Description>新しいテンプレートの作成</Description>
        <Parameters>
          <Parameter>name (テンプレート名)</Parameter>
          <Parameter>template (テンプレート内容)</Parameter>
        </Parameters>
        <Returns>
          <Object>作成されたテンプレート</Object>
        </Returns>
      </Function>
      <Function>
        <Name>update_template</Name>
        <Description>テンプレートの更新</Description>
        <Parameters>
          <Parameter>template_id (テンプレートID)</Parameter>
          <Parameter>name (テンプレート名)</Parameter>
          <Parameter>template (テンプレート内容)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>更新成功フラグ</Boolean>
        </Returns>
      </Function>
      <Function>
        <Name>delete_template</Name>
        <Description>テンプレートの削除</Description>
        <Parameters>
          <Parameter>template_id (テンプレートID)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>削除成功フラグ</Boolean>
        </Returns>
      </Function>
      <Function>
        <Name>generate_text</Name>
        <Description>選択した画像IDとテンプレートIDから定型文を生成</Description>
        <Parameters>
          <Parameter>image_ids (画像ID配列)</Parameter>
          <Parameter>template_id (テンプレートID)</Parameter>
        </Parameters>
        <Returns>
          <String>生成された定型文</String>
          <Object>置換された変数リスト</Object>
        </Returns>
      </Function>
      <Function>
        <Name>initialize_settings</Name>
        <Description>アプリケーション起動時に設定ファイルを初期化</Description>
        <Implementation>
          launcherのappsettings.jsonをmainsettings.jsonとして読み込み初期化する
        </Implementation>
        <Returns>
          <Boolean>初期化成功フラグ</Boolean>
        </Returns>
      </Function>
      <Function>
        <Name>get_settings</Name>
        <Description>現在の設定を取得</Description>
        <Returns>
          <Object>設定情報</Object>
        </Returns>
      </Function>
      <Function>
        <Name>update_settings</Name>
        <Description>設定情報を更新</Description>
        <Parameters>
          <Parameter>settings (設定情報オブジェクト)</Parameter>
        </Parameters>
        <Returns>
          <Boolean>更新成功フラグ</Boolean>
        </Returns>
      </Function>
    </Functions>
  </BackendModule>
  
  <CommunicationLayer>
    <Method>StandardIO</Method>
    <Description>標準入出力（stdin/stdout）を使用したJSON-RPC形式の通信</Description>
    <Protocol>
      <RequestFormat>
        {"command": "コマンド名", "params": {パラメータ}}
      </RequestFormat>
      <ResponseFormat>
        {"status": "success|error", "result": 結果データ, "message": "エラーメッセージ（エラー時のみ）"}
      </ResponseFormat>
    </Protocol>
    <Performance>
      <DataVolume>画像300〜2000枚、メタデータ（ユーザー名最大20名/画像）</DataVolume>
      <ResponseTime>検索結果は30秒以内に描画が必要</ResponseTime>
    </Performance>
    <Optimization>
      <Strategy>ページネーションの実装</Strategy>
      <Strategy>必要なデータのみを返す最適化</Strategy>
      <Strategy>バッチ処理によるパフォーマンス向上</Strategy>
    </Optimization>
  </CommunicationLayer>
</SystemIntegration>

<!-- 配布とパッケージング情報 -->
<Distribution>
  <PackagingStrategy>
    <Name>ビルド済みバイナリ配布</Name>
    <Description>Rustなどの依存関係をユーザーにインストールさせることなく、すべての必要なライブラリを同梱</Description>
    <Tools>
      <Tool>
        <Name>PyInstaller</Name>
        <Purpose>Pythonバックエンドのパッケージ化</Purpose>
        <Installation>pip install pyinstaller</Installation>
        <Configuration>
          <File>VSA-Backend.spec</File>
          <Options>--onedir --windowed --additional-hooks-dir=hooks</Options>
        </Configuration>
      </Tool>
      <Tool>
        <Name>electron-builder</Name>
        <Purpose>ElectronフロントエンドUIのパッケージ化</Purpose>
        <Installation>npm install --save-dev electron-builder</Installation>
      </Tool>
      <Tool>
        <Name>Inno Setup</Name>
        <Purpose>Windows用インストーラー作成</Purpose>
        <Notes>各コンポーネントを統合した単一インストーラーを提供</Notes>
      </Tool>
    </Tools>
  </PackagingStrategy>
  
  <SpecialDependencies>
    <Dependency>
      <Name>JPEG XL ライブラリ</Name>
      <Strategy>ビルド済みバイナリ同梱</Strategy>
      <Steps>
        <Step>開発環境でRustをインストール</Step>
        <Step>pillow-jxl-pluginをソースからビルド (pip install pillow-jxl-plugin --no-binary pillow-jxl-plugin)</Step>
        <Step>ビルドされたDLLファイルをパッケージに含める</Step>
        <Step>PyInstallerフックを作成してJPEG XLライブラリを確実に同梱</Step>
      </Steps>
      <HookScript>
        <Name>hook-pillow_jxl_plugin.py</Name>
        <Content>
          from PyInstaller.utils.hooks import collect_dynamic_libs
          
          # JXLライブラリの動的ライブラリを収集
          binaries = collect_dynamic_libs('pillow_jxl_plugin')
        </Content>
      </HookScript>
    </Dependency>
    
    <Dependency>
      <Name>7z圧縮ライブラリ</Name>
      <Strategy>py7zr依存ライブラリの同梱</Strategy>
      <Notes>py7zrのすべての依存関係を適切にバンドルするために--hidden-importオプションを使用</Notes>
    </Dependency>
  </SpecialDependencies>
  
  <PackageStructure>
    <Component>
      <Name>VSA-launcher.exe</Name>
      <Type>.NET WinFormsアプリ</Type>
      <Path>.</Path>
    </Component>
    <Component>
      <Name>VSA-UI</Name>
      <Type>Electronパッケージ</Type>
      <Path>.</Path>
      <Subcomponents>
        <Subcomponent>VSA-UI.exe</Subcomponent>
        <Subcomponent>resources/</Subcomponent>
      </Subcomponents>
    </Component>
    <Component>
      <Name>python-backend</Name>
      <Type>PyInstallerパッケージ</Type>
      <Path>.</Path>
      <Subcomponents>
        <Subcomponent>VSA-Backend.exe</Subcomponent>
        <Subcomponent>lib/ (依存ライブラリ)</Subcomponent>
        <Subcomponent>_internal/ (PyInstaller生成ファイル)</Subcomponent>
      </Subcomponents>
    </Component>
    <Component>
      <Name>config.json</Name>
      <Type>設定ファイル</Type>
      <Path>.</Path>
    </Component>
    <Component>
      <Name>README.md</Name>
      <Type>説明文書</Type>
      <Path>.</Path>
    </Component>
    <Component>
      <Name>LICENSE.txt</Name>
      <Type>ライセンス情報</Type>
      <Path>.</Path>
    </Component>
  </PackageStructure>
  
  <LicenseManagement>
    <ProductLicense>
      <Type>独自ライセンス (Boothでの販売)</Type>
      <SourceCodePolicy>GitHubで公開 (オープンソース)</SourceCodePolicy>
      <Notes>購入者にはビルド済みバイナリと優先サポートを提供</Notes>
    </ProductLicense>
    <ThirdPartyLicenses>
      <License>
        <Name>pillow-jxl-plugin</Name>
        <Type>MIT</Type>
        <RequiredActions>ライセンステキストを同梱</RequiredActions>
      </License>
      <License>
        <Name>py7zr</Name>
        <Type>LGPLv2.1</Type>
        <RequiredActions>ライセンステキストを同梱、配布物にライブラリソースへのリンク提供</RequiredActions>
      </License>
      <License>
        <Name>SQLAlchemy</Name>
        <Type>MIT</Type>
        <RequiredActions>ライセンステキストを同梱</RequiredActions>
      </License>
      <License>
        <Name>python-dateutil</Name>
        <Type>Apache License 2.0 + BSD</Type>
        <RequiredActions>ライセンステキストを同梱</RequiredActions>
      </License>
    </ThirdPartyLicenses>
    <LicenseDisplay>
      <Location>アプリケーション内のAboutダイアログ</Location>
      <Content>使用ライブラリとそれぞれのライセンス情報</Content>
    </LicenseDisplay>
  </LicenseManagement>
  
  <TestingProcedure>
    <Environment>
      <Type>クリーン環境</Type>
      <Description>依存ライブラリがインストールされていないWindows環境</Description>
    </Environment>
    <CheckItems>
      <Item>Rustなしでの起動確認</Item>
      <Item>JXL画像処理機能の動作確認</Item>
      <Item>7z圧縮機能の動作確認</Item>
      <Item>データベース操作の確認</Item>
      <Item>パス解決の正しさ確認 (相対パスや絶対パスの処理)</Item>
    </CheckItems>
  </TestingProcedure>
  
  <UpdateStrategy>
    <Method>アプリ内更新チェック機能</Method>
    <VersionCheck>
      <URL>https://api.github.com/repos/[username]/VRC-SnapArchive/releases/latest</URL>
      <Frequency>起動時および週1回</Frequency>
    </VersionCheck>
    <UpdateProcess>
      <Step>最新バージョン情報取得</Step>
      <Step>現バージョンと比較</Step>
      <Step>更新があればユーザーに通知</Step>
      <Step>ダウンロードとインストールオプション提供</Step>
    </UpdateProcess>
  </UpdateStrategy>
</Distribution>
